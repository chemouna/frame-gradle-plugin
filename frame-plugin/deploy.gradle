
apply plugin: 'maven'
apply plugin: 'signing'


def isReleaseBuild() {
    return project.ext.version.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('sonatypeUsername') ? sonatypeUsername : ""
}

def getRepositoryPassword() {
    return hasProperty('sonatypePassword') ? sonatypePassword : ""
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = project.ext.group
                pom.version = project.ext.version
                pom.artifactId = project.ext.pom_artifact_id

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name project.ext.pom_name
                    packaging project.ext.pom_packaging
                    description project.ext.pom_description
                    url project.ext.pom_url

                    scm {
                        url project.ext.pom_scm_url
                        connection project.ext.pom_scm_connection
                        developerConnection project.ext.pom_scm_dev_connection
                    }

                    licenses {
                        license {
                            name project.ext.pom_licence_name
                            url project.ext.pom_licence_url
                            distribution project.ext.pom_licence_dist
                        }
                    }

                    developers {
                        developer {
                            id project.ext.pom_developer_id
                            name project.ext.pom_developer_name
                            email project.ext.pom_developer_email
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

}